# Multi-stage container for Tournament Organizer Documentation System
# Using official Python image with Node.js for complete toolchain

FROM python:3.13-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js for markdownlint-cli2
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Install global npm packages
RUN npm install -g markdownlint-cli2

# Install uv for Python dependency management
RUN pip install uv

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash tournament
USER tournament
WORKDIR /home/tournament

# Set up Python environment
ENV PATH="/home/tournament/.local/bin:$PATH"

# Development stage
FROM base as development

# Copy dependency files
COPY --chown=tournament:tournament documents/pyproject.toml documents/uv.lock ./

# Install Python dependencies
RUN uv sync --frozen

# Copy all documentation source
COPY --chown=tournament:tournament documents/ ./

# Set working directory to match expected structure
WORKDIR /home/tournament

# Default command for development
CMD ["bash"]

# Production stage for CI/CD
FROM development as production

# Run linting and validation
RUN uv run pre-commit run --all-files || true
RUN uv run python scripts/validation/check_nav_orphans.py
RUN uv run python scripts/validation/check_no_frontmatter_title.py

# Build documentation
RUN uv run mkdocs build --strict

# Serve stage
FROM nginx:alpine as serve

# Copy built documentation
COPY --from=production /home/tournament/site /usr/share/nginx/html

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/ || exit 1
