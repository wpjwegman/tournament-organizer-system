[project]
name = "documents"
version = "0.1.0"
description = "Tournament Organizer Documentation System"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "cairosvg>=2.8.2",
    "mkdocs>=1.6.1",
    "mkdocs-htmlproofer-plugin>=0.12.0",
    "mkdocs-git-committers-plugin-2>=2.5.0",
    "mkdocs-macros-plugin>=1.3.7",
    "mkdocs-material>=9.6.15",
    "mkdocs-meta-descriptions-plugin>=4.1.0",
    "mkdocs-mermaid2-plugin>=1.2.1",
    "mkdocs-print-site-plugin>=2.7.3",
    "pillow>=11.3.0",
    "pypdf>=5.8.0",
    # Needed in CI to run documentation lint hooks (used by workflows)
    "pre-commit>=3.7.0",
    "ruff>=0.12.11",
    "mdformat>=0.7.22",
]

# Professional Ruff Configuration
[tool.ruff]
# Target Python 3.13+
target-version = "py313"

# Set line length for consistency
line-length = 120

# Enable comprehensive rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings  
    "F",      # Pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "ANN",    # flake8-annotations
    "ASYNC",  # flake8-async
    "S",      # bandit (security)
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "CPY",    # flake8-copyright
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "DJ",     # flake8-django
    "EM",     # flake8-errmsg
    "EXE",    # flake8-executable
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "INT",    # flake8-gettext
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # Pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # NumPy-specific rules
    "AIR",    # Airflow
    "PERF",   # Perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging
    "RUF",    # Ruff-specific rules
    # Complexity rules
    "C90",    # mccabe complexity
]

# Disable specific rules that may be too strict for documentation scripts
ignore = [
    "ANN401",   # Dynamically typed expressions (Any) are disallowed
    "COM812",   # Trailing comma missing (conflicts with formatter)
    "ISC001",   # Implicitly concatenated string literals (conflicts with formatter)
    "T201",     # print found (okay for scripts)
    "T203",     # pprint found (okay for debugging)
    "S603",     # subprocess call (okay for our linting scripts)
    "S607",     # Starting a process with a partial executable path
    "PLR0913",  # Too many arguments to function call
    "PLR2004",  # Magic value used in comparison
]

# Paths to exclude
exclude = [
    ".git",
    ".venv",
    "site",
    "__pycache__",
    ".cache",
    "markdown_fixes_backup",
]

[tool.ruff.lint.per-file-ignores]
# Scripts can have more relaxed rules
"scripts/**/*.py" = [
    "T201",     # print statements okay in scripts
    "S602",     # subprocess-popen-with-shell-equals-true
    "PLR0912",  # Too many branches
    "PLR0915",  # Too many statements
]

[tool.ruff.lint.isort]
known-first-party = ["scripts"]
force-single-line = true

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Indent with 4 spaces
indent-style = "space"
# Respect magic trailing comma
skip-magic-trailing-comma = false
# Automatically detect line ending
line-ending = "auto"

# MyPy Configuration for Type Safety
[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
show_column_numbers = true
pretty = true
color_output = true
namespace_packages = true

# Per-module overrides for gradual typing
[[tool.mypy.overrides]]
module = ["scripts.*", "main"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = ["markdownlint.*", "subprocess.*"]
ignore_missing_imports = true

# Security Configuration with Bandit
[tool.bandit]
skips = ["B101", "B603"]  # Allow asserts, subprocess handled by Ruff
exclude_dirs = [".venv", "site", "__pycache__", ".git"]

[tool.bandit.assert_used]
skips = ["*test*.py", "test_*.py"]

# Pytest Configuration for Testing
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=scripts",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-ra",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage Configuration
[tool.coverage.run]
source = ["scripts"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    ".venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

# Code Complexity Configuration
[tool.radon]
# Cyclomatic Complexity Configuration
cc_min = "C"        # Minimum complexity grade (A, B, C, D, E, F)
mi_min = "B"        # Maintainability Index minimum grade
exclude = [
    ".venv/*",
    "site/*", 
    "__pycache__/*",
    "tests/*",
    "markdown_fixes_backup/*"
]

# Xenon Configuration (Complexity Monitoring)
[tool.xenon]
max_absolute = 10   # Maximum cyclomatic complexity
max_modules = 10    # Maximum average complexity per module  
max_average = 5     # Maximum average complexity per function

# McCabe Complexity Configuration (via Ruff)
[tool.ruff.lint.mccabe]
max-complexity = 10  # Maximum cyclomatic complexity per function

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "coverage>=7.10.6",
    "flake8-cognitive-complexity>=0.1.0",
    "mccabe>=0.7.0",
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "radon>=6.0.1",
    "safety>=3.6.0",
    "types-requests>=2.32.4.20250809",
    "xenon>=0.9.3",
]
