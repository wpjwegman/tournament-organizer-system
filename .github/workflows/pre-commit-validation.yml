name: 🚦 Pre-Commit Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'documents/**/*.md'

jobs:
  validate-commit-quality:
    name: 🔍 Validate Commit Quality
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: � Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: � Container-Based Pre-Commit Validation
      run: |
        cd documents

        # Build the same container as our local validation system
        docker build -t localhost/docs-quality:latest -f Containerfile .

        echo "🔍 Running container-based pre-commit hook validation..."

        # Get list of modified markdown files in this PR
        MODIFIED_FILES=$(git diff --name-only origin/master HEAD | grep '\.md$' || true)

        if [ -z "$MODIFIED_FILES" ]; then
          echo "::notice::No markdown files modified in this PR"
          exit 0
        fi

        echo "Modified files:"
        echo "$MODIFIED_FILES" | sed 's/^/  /'

        # Extract unique domains from modified files
        DOMAINS=$(echo "$MODIFIED_FILES" | grep '^documents/docs/domains/' | cut -d'/' -f4 | sort -u || true)

        if [ -z "$DOMAINS" ]; then
          echo "::notice::No domain files modified"
          exit 0
        fi

        echo "Affected domains:"
        echo "$DOMAINS" | sed 's/^/  /'

        # Run container-based validation for each domain with same threshold as pre-commit hook
        docker run --rm -v "$PWD:/workspace" -w /workspace/documents localhost/docs-quality:latest bash -c "
          echo '🔍 Setting up Python environment...' &&
          rm -rf /tmp/project-venv /tmp/project-documents &&
          cp -r /workspace/documents /tmp/project-documents &&
          cd /tmp/project-documents &&
          export PATH=\"/usr/local/bin:/usr/bin:/bin:\$PATH\" &&
          /usr/local/bin/uv venv /tmp/project-venv &&
          /usr/local/bin/uv sync &&
          
          echo '📋 Checking modified domains with pre-commit thresholds...' &&
          FAILED_DOMAINS=\"\" &&
          for DOMAIN in $DOMAINS; do
            echo \"::group::📋 Checking domain: \$DOMAIN\" &&
            
            # Use same threshold as pre-commit hook (5 errors) and capture output
            if OUTPUT=\$(/usr/local/bin/uv run python scripts/linting/domain_linter.py \"\$DOMAIN\" --check-only --threshold 5 --verbose 2>&1); then
              echo \"\$OUTPUT\" &&
              echo \"✅ Domain \$DOMAIN passed validation\"
            else
              echo \"\$OUTPUT\" &&
              FAILED_DOMAINS=\"\$FAILED_DOMAINS \$DOMAIN\" &&
              echo \"❌ Domain \$DOMAIN failed validation\"
            fi &&
            
            echo \"::endgroup::\"
          done &&
          
          # Report results (same format as pre-commit hook)
          if [ -n \"\$FAILED_DOMAINS\" ]; then
            echo \"::error::Pre-commit validation failed for domains:\$FAILED_DOMAINS\" &&
            echo \"\" &&
            echo \"💡 To fix issues automatically:\" &&
            for DOMAIN in \$FAILED_DOMAINS; do
              echo \"   uv run python scripts/linting/domain_linter.py \$DOMAIN --fix --auto-stage\"
            done &&
            echo \"\" &&
            echo \"🚫 To bypass this check locally (not recommended):\" &&
            echo \"   git commit --no-verify\" &&
            exit 1
          else
            echo \"✅ All modified domains pass pre-commit validation\"
          fi
        "

    - name: 📊 Generate Validation Report
      if: always()
      run: |
        cd documents

        # Generate comprehensive report using container
        docker run --rm -v "$PWD:/workspace" -w /workspace/documents localhost/docs-quality:latest bash -c "
          rm -rf /tmp/project-venv /tmp/project-documents &&
          cp -r /workspace/documents /tmp/project-documents &&
          cd /tmp/project-documents &&
          export PATH=\"/usr/local/bin:/usr/bin:/bin:\$PATH\" &&
          /usr/local/bin/uv venv /tmp/project-venv &&
          /usr/local/bin/uv sync &&
          /usr/local/bin/uv run python scripts/linting/repository_linter.py --all-domains --save-report
        "

        # Copy report from container
        docker run --rm -v "$PWD:/workspace" -w /workspace/documents localhost/docs-quality:latest bash -c "
          cp /tmp/project-documents/repository_lint_report_*.md . || true
        "

        # Create PR-specific report
        cat > pr_validation_report.md << 'EOF'
        # 📊 PR Documentation Validation Report

        **Pull Request:** #${{ github.event.number }}
        **Branch:** `${{ github.head_ref }}`
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

        ## Validation Results

        This report shows the documentation quality validation results for this pull request.
        The validation uses the same rules and thresholds as the Git pre-commit hooks.

        EOF

        if [ -f "repository_lint_report_"*.md ]; then
          echo "## Repository Status" >> pr_validation_report.md
          echo "" >> pr_validation_report.md
          tail -n +10 repository_lint_report_*.md >> pr_validation_report.md
        fi

        echo "" >> pr_validation_report.md
        echo "## Container-Based Validation" >> pr_validation_report.md
        echo "" >> pr_validation_report.md
        echo "This PR validation uses the same container-based approach as local validation." >> pr_validation_report.md
        echo "All checks run in the exact same environment as \`scripts/container/validate.ps1\`." >> pr_validation_report.md
        echo "" >> pr_validation_report.md
        echo "## Pre-Commit Hook Integration" >> pr_validation_report.md
        echo "" >> pr_validation_report.md
        echo "This PR validation simulates the same checks that run automatically" >> pr_validation_report.md
        echo "with the installed Git pre-commit hooks. Developers can install these" >> pr_validation_report.md
        echo "hooks locally using:" >> pr_validation_report.md
        echo "" >> pr_validation_report.md
        echo '```bash' >> pr_validation_report.md
        echo "cd documents" >> pr_validation_report.md
        echo "python scripts/git-hooks/setup_git_hooks.py --install" >> pr_validation_report.md
        echo '```' >> pr_validation_report.md

    - name: 📄 Upload Validation Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pr-validation-report
        path: |
          documents/pr_validation_report.md
          documents/repository_lint_report_*.md
        retention-days: 14
