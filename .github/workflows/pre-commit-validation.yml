name: 🚦 Pre-Commit Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'documents/**/*.md'

jobs:
  validate-commit-quality:
    name: 🔍 Validate Commit Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        cd documents
        uv sync --frozen

    - name: 🔍 Simulate Pre-Commit Hook
      run: |
        cd documents
        
        echo "🔍 Simulating pre-commit hook validation..."
        
        # Get list of modified markdown files in this PR
        MODIFIED_FILES=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep '\.md$' || true)
        
        if [ -z "$MODIFIED_FILES" ]; then
          echo "::notice::No markdown files modified in this PR"
          exit 0
        fi
        
        echo "Modified files:"
        echo "$MODIFIED_FILES" | sed 's/^/  /'
        
        # Extract unique domains from modified files
        DOMAINS=$(echo "$MODIFIED_FILES" | grep '^documents/docs/domains/' | cut -d'/' -f4 | sort -u || true)
        
        if [ -z "$DOMAINS" ]; then
          echo "::notice::No domain files modified"
          exit 0
        fi
        
        echo "Affected domains:"
        echo "$DOMAINS" | sed 's/^/  /'
        
        # Check each modified domain with development threshold (same as pre-commit hook)
        FAILED_DOMAINS=""
        for DOMAIN in $DOMAINS; do
          echo "::group::📋 Checking domain: $DOMAIN"
          
          # Use same threshold as pre-commit hook (5 errors)
          if ! python scripts/linting/domain_linter.py "$DOMAIN" --check-only --threshold 5 --verbose; then
            FAILED_DOMAINS="$FAILED_DOMAINS $DOMAIN"
          fi
          
          echo "::endgroup::"
        done
        
        # Report results (same format as pre-commit hook)
        if [ -n "$FAILED_DOMAINS" ]; then
          echo "::error::Pre-commit validation failed for domains:$FAILED_DOMAINS"
          echo ""
          echo "💡 To fix issues automatically:"
          for DOMAIN in $FAILED_DOMAINS; do
            echo "   python scripts/linting/domain_linter.py $DOMAIN --fix --auto-stage"
          done
          echo ""
          echo "🚫 To bypass this check locally (not recommended):"
          echo "   git commit --no-verify"
          exit 1
        else
          echo "✅ All modified domains pass pre-commit validation"
        fi

    - name: 📊 Generate Validation Report
      if: always()
      run: |
        cd documents
        
        # Generate comprehensive report for PR context
        python scripts/linting/repository_linter.py --all-domains --save-report
        
        # Create PR-specific report
        cat > pr_validation_report.md << 'EOF'
        # 📊 PR Documentation Validation Report
        
        **Pull Request:** #${{ github.event.number }}
        **Branch:** `${{ github.head_ref }}`
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## Validation Results
        
        This report shows the documentation quality validation results for this pull request.
        The validation uses the same rules and thresholds as the Git pre-commit hooks.
        
        EOF
        
        if [ -f "repository_lint_report_"*.md ]; then
          echo "## Repository Status" >> pr_validation_report.md
          echo "" >> pr_validation_report.md
          tail -n +10 repository_lint_report_*.md >> pr_validation_report.md
        fi
        
        echo "" >> pr_validation_report.md
        echo "## Pre-Commit Hook Integration" >> pr_validation_report.md
        echo "" >> pr_validation_report.md
        echo "This PR validation simulates the same checks that run automatically" >> pr_validation_report.md
        echo "with the installed Git pre-commit hooks. Developers can install these" >> pr_validation_report.md
        echo "hooks locally using:" >> pr_validation_report.md
        echo "" >> pr_validation_report.md
        echo '```bash' >> pr_validation_report.md
        echo "cd documents" >> pr_validation_report.md
        echo "python scripts/git-hooks/setup_git_hooks.py --install" >> pr_validation_report.md
        echo '```' >> pr_validation_report.md

    - name: 📄 Upload Validation Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pr-validation-report
        path: |
          documents/pr_validation_report.md
          documents/repository_lint_report_*.md
        retention-days: 14
