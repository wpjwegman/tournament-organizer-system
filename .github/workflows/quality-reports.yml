name: 📈 Automated Quality Reports

on:
  schedule:
    # Run every Monday at 9:00 AM UTC (weekly quality report)
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      include_fixes:
        description: 'Apply automatic fixes'
        required: false
        default: false
        type: boolean

jobs:
  generate-quality-report:
    name: 📊 Generate Quality Report
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: � Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: � Run Container-Based Quality Analysis
      run: |
        cd documents
        
        # Build the same container as our local validation system
        docker build -t localhost/docs-quality:latest -f Containerfile .
        
        # Run comprehensive quality analysis using container
        # Key: copy files to /tmp and run there to avoid permission issues
        docker run --rm -v "${{ github.workspace }}:/workspace" -w /workspace/documents localhost/docs-quality:latest bash -c "
          echo '🔍 Setting up Python environment...' &&
          rm -rf /tmp/project-documents &&
          cp -r /workspace/documents /tmp/project-documents &&
          cd /tmp/project-documents &&
          export PATH=\"/usr/local/bin:/usr/bin:/bin:\$PATH\" &&
          /usr/local/bin/uv sync &&
          
          echo '🏆 Running comprehensive quality dashboard...' &&
          mkdir -p /tmp/project-documents/reports &&
          /usr/local/bin/uv run python scripts/validation/quality_dashboard.py --project-root /tmp/project-documents --save-report &&
          
          echo '📊 Generating domain-specific reports...' &&
          for domain_dir in docs/domains/*/; do
            if [ -d \"\$domain_dir\" ]; then
              domain=\$(basename \"\$domain_dir\")
              echo \"  Processing domain: \$domain\"
              /usr/local/bin/uv run python scripts/linting/domain_linter.py \"\$domain\" --check-only --save-report --report
            fi
          done &&
          
          echo '📋 Running comprehensive repository analysis...' &&
          /usr/local/bin/uv run python scripts/linting/repository_linter.py --all-domains --report --save-report --verbose &&
          
          echo '📁 Copying reports back to workspace...' &&
          cp -r /tmp/project-documents/reports /workspace/documents/ 2>/dev/null || true &&
          cp /tmp/project-documents/repository_lint_report_*.md /workspace/documents/ 2>/dev/null || true
        "

    - name: 📈 Create Quality Dashboard
      run: |
        cd documents

        # Create a quality dashboard markdown file
        cat > quality_dashboard.md << 'EOF'
        # 📈 Documentation Quality Dashboard

        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Repository:** tournament-organizer-system
        **Branch:** ${{ github.ref_name }}

        ## Executive Summary

        This dashboard provides an overview of documentation quality across all domains
        in the Tournament Organizer System repository.

        EOF

        # Add repository statistics
        if [ -f repository_lint_report_*.md ]; then
          echo "## Repository Overview" >> quality_dashboard.md
          echo "" >> quality_dashboard.md

          # Extract key metrics from the report
          REPORT_FILE=$(ls repository_lint_report_*.md | head -1)
          grep -A 10 "## Summary Statistics" "$REPORT_FILE" >> quality_dashboard.md

          echo "" >> quality_dashboard.md
          echo "## Error Analysis" >> quality_dashboard.md
          echo "" >> quality_dashboard.md
          grep -A 20 "## Error Analysis" "$REPORT_FILE" >> quality_dashboard.md
        fi

        # Add domain-specific quality scores
        echo "" >> quality_dashboard.md
        echo "## Domain Quality Scores" >> quality_dashboard.md
        echo "" >> quality_dashboard.md
        echo "| Domain | Files | Errors | Status |" >> quality_dashboard.md
        echo "|--------|-------|--------|--------|" >> quality_dashboard.md

        for domain_dir in docs/domains/*/; do
          if [ -d "$domain_dir" ]; then
            domain=$(basename "$domain_dir")
            file_count=$(find "$domain_dir" -name "*.md" | wc -l)

            # Get error count for domain (simulate quick check)
            error_output=$(python scripts/linting/domain_linter.py "$domain" --check-only 2>&1 || true)

            if echo "$error_output" | grep -q "No linting errors found"; then
              status="✅ Perfect"
              errors="0"
            elif echo "$error_output" | grep -q "errors"; then
              errors=$(echo "$error_output" | grep -o '[0-9]\+ errors' | head -1 | grep -o '[0-9]\+' || echo "Unknown")
              if [ "$errors" -le 5 ]; then
                status="⚠️ Minor Issues"
              else
                status="❌ Needs Work"
              fi
            else
              errors="0"
              status="✅ Perfect"
            fi

            echo "| $domain | $file_count | $errors | $status |" >> quality_dashboard.md
          fi
        done

        # Add improvement recommendations
        echo "" >> quality_dashboard.md
        echo "## Quality Improvement Recommendations" >> quality_dashboard.md
        echo "" >> quality_dashboard.md
        echo "### Automated Fixes Available" >> quality_dashboard.md
        echo "" >> quality_dashboard.md
        echo "For domains with issues, you can apply automatic fixes using:" >> quality_dashboard.md
        echo "" >> quality_dashboard.md
        echo '```bash' >> quality_dashboard.md
        echo "cd documents" >> quality_dashboard.md
        echo "" >> quality_dashboard.md
        echo "# Professional markdown formatting (recommended)" >> quality_dashboard.md
        echo "markdownlint-cli2 --fix \"docs/**/*.md\"" >> quality_dashboard.md
        echo "" >> quality_dashboard.md
        echo "# Domain-specific business logic fixes" >> quality_dashboard.md
        echo "python scripts/linting/domain_linter.py DOMAIN_NAME --fix --auto-stage" >> quality_dashboard.md
        echo "" >> quality_dashboard.md
        echo "# Comprehensive fixes (combines both approaches)" >> quality_dashboard.md
        echo "markdownlint-cli2 --fix \"docs/**/*.md\" && python scripts/linting/repository_linter.py --all-domains --fix" >> quality_dashboard.md
        echo '```' >> quality_dashboard.md

        echo "" >> quality_dashboard.md
        echo "### Continuous Integration" >> quality_dashboard.md
        echo "" >> quality_dashboard.md
        echo "- ✅ GitHub Actions workflows validate all PRs" >> quality_dashboard.md
        echo "- ✅ Pre-commit hooks prevent low-quality commits" >> quality_dashboard.md
        echo "- ✅ Weekly automated quality reports" >> quality_dashboard.md
        echo "- ✅ Auto-fix capabilities for common issues" >> quality_dashboard.md

    - name: 📊 Commit Quality Reports (if fixes applied)
      if: github.event.inputs.include_fixes == 'true'
      run: |
        cd documents
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Quality Bot"

        if ! git diff --quiet; then
          git add .
          git commit -m "📊 Weekly documentation quality improvements

          Automated quality maintenance:
          - Applied automatic markdown fixes
          - Updated quality reports
          - Standardized formatting across domains

          Generated by: GitHub Actions quality workflow"
          git push
        fi

    - name: 📄 Upload Quality Reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports-${{ github.run_number }}
        path: |
          documents/quality_dashboard.md
          documents/repository_lint_report_*.md
          documents/scripts/reports/*.md
        retention-days: 90

    - name: 📧 Create Issue for Quality Review (if problems found)
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          // Read quality dashboard if it exists
          let dashboardContent = '';
          try {
            dashboardContent = fs.readFileSync('documents/quality_dashboard.md', 'utf8');
          } catch (error) {
            dashboardContent = 'Quality dashboard could not be generated.';
          }

          const issueBody = `# 📊 Weekly Documentation Quality Review Required

          The automated quality report has detected issues that require attention.

          ## Action Required

          Please review the quality dashboard and apply necessary fixes:

          \`\`\`bash
          cd documents

          # Professional markdown formatting (recommended first step)
          markdownlint-cli2 --fix "docs/**/*.md"

          # Check specific domains with issues
          python scripts/linting/repository_linter.py --all-domains --report

          # Apply domain-specific business logic fixes
          python scripts/linting/repository_linter.py --all-domains --fix
          \`\`\`

          ## Quality Dashboard

          ${dashboardContent}

          ## Automated Resolution

          You can also trigger automatic fixes by:
          1. Going to Actions → Automated Quality Reports
          2. Click "Run workflow"
          3. Check "Apply automatic fixes"
          4. Run the workflow

          ---
          *This issue was created automatically by the quality monitoring system.*`;

          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `📊 Weekly Documentation Quality Review - ${new Date().toISOString().split('T')[0]}`,
            body: issueBody,
            labels: ['documentation', 'quality', 'automated']
          });
