name: üìö Documentation Quality Control

on:
  pull_request:
    branches: [master, develop]
    paths:
      - 'documents/**/*.md'
      - 'documents/.pymarkdown.json'
      - 'documents/scripts/**'
  push:
    branches: [master, develop]
    paths:
      - 'documents/**/*.md'
      - 'documents/.pymarkdown.json'
      - 'documents/scripts/**'

jobs:
  lint-documentation:
    name: üîç Lint Documentation
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üéØ Container-Based Domain-Specific Linting
      id: domain-lint
      run: |
        cd documents

        # Build the same container as our local validation system
        docker build -t localhost/docs-quality:latest -f Containerfile .

        # Get modified domains from changed files
        CHANGED_FILES=$(git diff --name-only origin/master HEAD)
        MODIFIED_DOMAINS=$(echo "$CHANGED_FILES" | grep '^documents/docs/domains/' | cut -d'/' -f4 | sort -u || true)

        echo "Modified domains: $MODIFIED_DOMAINS"

        if [ -z "$MODIFIED_DOMAINS" ]; then
          echo "::notice::No domain files modified in this change"
          exit 0
        fi

        # Check each modified domain using container with strict threshold for CI
        docker run --rm -v "$PWD:/workspace" -w /workspace/documents localhost/docs-quality:latest bash -c "
          echo 'üîç Setting up Python environment...' &&
          rm -rf /tmp/project-documents &&
          cp -r /workspace/documents /tmp/project-documents &&
          cd /tmp/project-documents &&
          export PATH=\"/usr/local/bin:/usr/bin:/bin:\$PATH\" &&
          /usr/local/bin/uv sync &&
          
          echo 'üéØ Checking each modified domain with strict CI standards...' &&
          FAILED_DOMAINS=\"\" &&
          for DOMAIN in $MODIFIED_DOMAINS; do
            echo \"::group::üîç Checking domain: \$DOMAIN\" &&
            
            if /usr/local/bin/uv run python scripts/linting/domain_linter.py \"\$DOMAIN\" --check-only --threshold 0 --verbose; then
              echo \"::notice::Domain \$DOMAIN passed linting\"
            else
              FAILED_DOMAINS=\"\$FAILED_DOMAINS \$DOMAIN\" &&
              echo \"::error::Domain \$DOMAIN has linting errors\"
            fi &&
            
            echo \"::endgroup::\"
          done &&
          
          if [ -n \"\$FAILED_DOMAINS\" ]; then
            echo \"::error::Linting failed for domains:\$FAILED_DOMAINS\" &&
            echo \"failed_domains=\$FAILED_DOMAINS\" >> /tmp/github_output &&
            exit 1
          fi
        "

        # Copy any output back from container
        docker run --rm -v "$PWD:/workspace" -w /workspace/documents localhost/docs-quality:latest bash -c "
          if [ -f /tmp/github_output ]; then
            cat /tmp/github_output >> $GITHUB_OUTPUT
          fi
        "

    - name: üìä Repository-Wide Analysis
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        cd documents
        echo "::group::üìä Repository-wide linting analysis"

        # Use container for repository-wide analysis
        docker run --rm -v "$PWD:/workspace" -w /workspace/documents localhost/docs-quality:latest bash -c "
          rm -rf /tmp/project-documents &&
          cp -r /workspace/documents /tmp/project-documents &&
          cd /tmp/project-documents &&
          export PATH=\"/usr/local/bin:/usr/bin:/bin:\$PATH\" &&
          /usr/local/bin/uv sync &&
          /usr/local/bin/uv run python scripts/linting/repository_linter.py --all-domains --report --save-report
        "

        # Copy reports from container
        docker run --rm -v "$PWD:/workspace" -w /workspace/documents localhost/docs-quality:latest bash -c "
          cp /tmp/project-documents/repository_lint_report_*.md . || true &&
          cp -r /tmp/project-documents/scripts/reports/* scripts/reports/ || true
        "

        echo "::endgroup::"

    - name: üìÑ Upload Lint Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lint-reports
        path: |
          documents/repository_lint_report_*.md
          documents/scripts/reports/*.md
        retention-days: 30

    - name: üí° Suggest Fixes
      if: failure() && steps.domain-lint.outputs.failed_domains
      run: |
        cd documents
        echo "::notice title=Fix Suggestions::To fix linting issues automatically:"
        for DOMAIN in ${{ steps.domain-lint.outputs.failed_domains }}; do
          echo "::notice::  python scripts/linting/domain_linter.py $DOMAIN --fix --auto-stage"
        done
        echo "::notice::Then commit and push the fixes"

  auto-fix-pull-request:
    name: üîß Auto-Fix Documentation (Optional)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'auto-fix-docs')

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîß Apply Container-Based Automatic Fixes
      run: |
        cd documents
        
        # Build the same container as our local validation system
        docker build -t localhost/docs-quality:latest -f Containerfile .        # Get modified domains
        CHANGED_FILES=$(git diff --name-only origin/master HEAD)
        MODIFIED_DOMAINS=$(echo "$CHANGED_FILES" | grep '^documents/docs/domains/' | cut -d'/' -f4 | sort -u || true)
        MODIFIED_MD_FILES=$(echo "$CHANGED_FILES" | grep '\.md$' || true)

        if [ -z "$MODIFIED_MD_FILES" ]; then
          echo "No markdown files to fix"
          exit 0
        fi

        # Apply fixes using container (same environment as validation)
        docker run --rm -v "$PWD:/workspace" -w /workspace/documents localhost/docs-quality:latest bash -c "
          rm -rf /tmp/project-documents &&
          cp -r /workspace/documents /tmp/project-documents &&
          cd /tmp/project-documents &&
          export PATH=\"/usr/local/bin:/usr/bin:/bin:\$PATH\" &&
          /usr/local/bin/uv sync &&
          
          echo 'üîß Applying professional markdown fixes with markdownlint-cli2' &&
          markdownlint-cli2 --fix 'docs/**/*.md' || true &&
          
          if [ -n \"$MODIFIED_DOMAINS\" ]; then
            for DOMAIN in $MODIFIED_DOMAINS; do
              echo \"üîß Applying domain-specific fixes: \$DOMAIN\" &&
              /usr/local/bin/uv run python scripts/linting/domain_linter.py \"\$DOMAIN\" --fix --verbose || true
            done
          fi
        "

        # Copy fixed files back from container
        docker run --rm -v "$PWD:/workspace" -w /workspace/documents localhost/docs-quality:latest bash -c "
          cp -r /tmp/project-documents/docs/* docs/ || true
        "

    - name: üìù Commit Fixes
      run: |
        cd documents
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add .
          git commit -m "üîß Auto-fix documentation linting issues

          Applied automatic fixes using container-based tools:
          - markdownlint-cli2 --fix for markdown formatting
          - domain_linter.py for domain-specific business rules
          - Fixed list spacing, heading spacing, YAML frontmatter
          - Maintained code quality standards

          Generated by: Container-based validation system"
          git push
        fi
