name: üìö Documentation Quality Control

on:
  pull_request:
    branches: [master, develop]
    paths:
      - 'documents/**/*.md'
      - 'documents/.pymarkdown.json'
      - 'documents/scripts/**'
  push:
    branches: [master, develop]
    paths:
      - 'documents/**/*.md'
      - 'documents/.pymarkdown.json'
      - 'documents/scripts/**'

jobs:
  lint-documentation:
    name: üîç Lint Documentation
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        cd documents
        uv sync --frozen

    - name: üîß Setup Node.js for markdownlint-cli2
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: üìã Install markdownlint-cli2
      run: |
        npm install -g markdownlint-cli2

    - name: üîß Configure Scripts
      run: |
        cd documents
        chmod +x scripts/cli/domain-lint.sh
        chmod +x scripts/git-hooks/*.sh

    - name: üéØ Domain-Specific Linting
      id: domain-lint
      run: |
        cd documents

        # Get modified domains from changed files
        CHANGED_FILES=$(git diff --name-only origin/master HEAD)
        MODIFIED_DOMAINS=$(echo "$CHANGED_FILES" | grep '^documents/docs/domains/' | cut -d'/' -f4 | sort -u || true)

        echo "Modified domains: $MODIFIED_DOMAINS"

        if [ -z "$MODIFIED_DOMAINS" ]; then
          echo "::notice::No domain files modified in this change"
          exit 0
        fi

        # Check each modified domain with strict threshold for CI
        FAILED_DOMAINS=""
        for DOMAIN in $MODIFIED_DOMAINS; do
          echo "::group::üîç Checking domain: $DOMAIN"

          if ! python scripts/linting/domain_linter.py "$DOMAIN" --check-only --threshold 0 --verbose; then
            FAILED_DOMAINS="$FAILED_DOMAINS $DOMAIN"
            echo "::error::Domain $DOMAIN has linting errors"
          else
            echo "::notice::Domain $DOMAIN passed linting"
          fi

          echo "::endgroup::"
        done

        if [ -n "$FAILED_DOMAINS" ]; then
          echo "::error::Linting failed for domains:$FAILED_DOMAINS"
          echo "failed_domains=$FAILED_DOMAINS" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: üìä Repository-Wide Analysis
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        cd documents
        echo "::group::üìä Repository-wide linting analysis"

        python scripts/linting/repository_linter.py --all-domains --report --save-report

        echo "::endgroup::"

    - name: üìÑ Upload Lint Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lint-reports
        path: |
          documents/repository_lint_report_*.md
          documents/scripts/reports/*.md
        retention-days: 30

    - name: üí° Suggest Fixes
      if: failure() && steps.domain-lint.outputs.failed_domains
      run: |
        cd documents
        echo "::notice title=Fix Suggestions::To fix linting issues automatically:"
        for DOMAIN in ${{ steps.domain-lint.outputs.failed_domains }}; do
          echo "::notice::  python scripts/linting/domain_linter.py $DOMAIN --fix --auto-stage"
        done
        echo "::notice::Then commit and push the fixes"

  auto-fix-pull-request:
    name: üîß Auto-Fix Documentation (Optional)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'auto-fix-docs')

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        cd documents
        uv sync --frozen

    - name: üîß Apply Automatic Fixes
      run: |
        cd documents

        # Get modified domains
        CHANGED_FILES=$(git diff --name-only origin/master HEAD)
        MODIFIED_DOMAINS=$(echo "$CHANGED_FILES" | grep '^documents/docs/domains/' | cut -d'/' -f4 | sort -u || true)
        MODIFIED_MD_FILES=$(echo "$CHANGED_FILES" | grep '\.md$' || true)

        if [ -z "$MODIFIED_MD_FILES" ]; then
          echo "No markdown files to fix"
          exit 0
        fi

        # First apply professional markdown fixes to all modified files
        echo "üîß Applying professional markdown fixes with markdownlint-cli2"
        for file in $MODIFIED_MD_FILES; do
          if [ -f "$file" ]; then
            echo "  Fixing: $file"
            markdownlint-cli2 --fix "$file" || true
          fi
        done

        # Then apply domain-specific fixes if domains were modified
        if [ -n "$MODIFIED_DOMAINS" ]; then
          for DOMAIN in $MODIFIED_DOMAINS; do
            echo "üîß Applying domain-specific fixes: $DOMAIN"
            python scripts/linting/domain_linter.py "$DOMAIN" --fix --verbose
          done
        fi

    - name: üìù Commit Fixes
      run: |
        cd documents
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add .
          git commit -m "üîß Auto-fix documentation linting issues

          Applied automatic fixes using professional tools:
          - markdownlint-cli2 --fix for markdown formatting
          - domain_linter.py for domain-specific business rules
          - Fixed list spacing, heading spacing, YAML frontmatter
          - Maintained code quality standards

          Generated by: markdownlint-cli2 + domain_linter.py"
          git push
        fi
