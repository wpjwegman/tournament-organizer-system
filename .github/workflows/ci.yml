name: Project CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  # Use containerized quality checks to match our container validation system
  containerized-quality:
    name: 🐳 Container-Based Quality Validation
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'documents/') || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔍 Run Container-Based Quality Validation
      run: |
        cd documents
        # Build the exact same container as our local validation system
        docker build -t localhost/docs-quality:latest -f Containerfile .
        
        # Run the exact same validation commands as our local container script
        # Key: stay in /workspace/documents working directory where pyproject.toml exists
        docker run --rm -v "$PWD:/workspace" -w /workspace/documents localhost/docs-quality:latest bash -c "
          echo '--- Running comprehensive quality checks ---' &&
          echo '🔍 Setting up Python environment...' &&
          rm -rf /tmp/project-documents &&
          cp -r /workspace/documents /tmp/project-documents &&
          export PATH=\"/usr/local/bin:/usr/bin:/bin:\$PATH\" &&
          /usr/local/bin/uv sync &&
          echo '' &&
          echo '🔒 Security scanning with Bandit...' &&
          (/usr/local/bin/uv run bandit -r scripts/ --configfile pyproject.toml -f screen || echo 'Security issues found - review required') &&
          echo '' &&
          echo '🎯 Code quality analysis with Ruff...' &&
          (/usr/local/bin/uv run ruff check scripts/ || echo 'Code quality issues found - review required') &&
          echo '' &&
          echo '📚 Documentation validation with markdownlint-cli2...' &&
          echo 'Markdown validation skipped (requires Node.js setup in container)' &&
          echo '' &&
          echo '🏆 Running quality dashboard...' &&
          mkdir -p reports &&
          (/usr/local/bin/uv run python scripts/validation/quality_dashboard.py --project-root /workspace/documents --quiet || echo 'Quality dashboard completed with warnings') &&
          echo '' &&
          echo '🏗️ Testing MkDocs build...' &&
          (/usr/local/bin/uv run mkdocs build --strict --clean || echo 'Documentation build issues found - review required') &&
          echo 'Quality validation checks completed.'
        "

  # Future: Backend tests (when implemented)
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'backend/') || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Backend placeholder
      run: |
        echo "Backend tests will be implemented when backend development begins"
        echo "Current status: Documentation-first development phase"

  # Future: Frontend tests (when implemented)
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'frontend/') || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Frontend placeholder
      run: |
        echo "Frontend tests will be implemented when frontend development begins"
        echo "Current status: Documentation-first development phase"
