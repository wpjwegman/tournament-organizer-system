name: "📚 Documentation Deployment Pipeline"

on:
  push:
    branches: [master]
    paths:
      - 'documents/**/*.md'
      - 'documents/mkdocs.yml'
      - 'documents/pyproject.toml'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    name: 🏗️ Build Documentation Site
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git-revision-date-localized plugin

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Documentation Container
      run: |
        cd documents
        docker build -t localhost/docs-quality:latest -f Containerfile .

    - name: 📚 Generate Documentation Site
      run: |
        cd documents
        
        # Remove existing site directory and recreate it
        sudo rm -rf site
        mkdir -p site
        
        # Professional solution: Use Docker volume to handle file permissions correctly
        # Create a temporary directory that the container can write to
        TEMP_SITE_DIR=$(mktemp -d)
        
        # Generate documentation site with proper volume handling
        docker run --rm \
          -v "${{ github.workspace }}/documents:/source:ro" \
          -v "$TEMP_SITE_DIR:/output" \
          localhost/docs-quality:latest bash -c "
          echo '--- Building Documentation Site ---' &&
          
          # Create isolated build environment
          BUILD_DIR=/tmp/docs-build
          mkdir -p \$BUILD_DIR &&
          
          echo '📦 Copying source files to build environment...' &&
          cp -r /source/* \$BUILD_DIR/ &&
          cd \$BUILD_DIR &&
          
          echo '📦 Setting up Python environment...' &&
          export UV_CACHE_DIR=/tmp/uv-cache &&
          mkdir -p \$UV_CACHE_DIR &&
          /usr/local/bin/uv sync &&
          
          echo '📚 Building MkDocs site with strict validation...' &&
          /usr/local/bin/uv run mkdocs build --clean --strict &&
          
          echo '📤 Copying built site to output volume...' &&
          if [ -d site ] && [ \"\$(ls -A site 2>/dev/null)\" ]; then
            echo 'Site directory contains files, copying to output...' &&
            cp -r site/* /output/ &&
            echo 'Site files copied successfully'
          else
            echo 'ERROR: site directory is empty or missing' &&
            ls -la site/ || echo 'site directory does not exist' &&
            exit 1
          fi &&
          
          echo '✅ Documentation site built successfully' &&
          echo 'Generated files in build directory:' &&
          ls -la site/ | head -10 &&
          echo 'Generated files in output volume:' &&
          ls -la /output/ | head -10
          "
        
        # Copy the results from temp directory to workspace with proper permissions
        echo "📤 Transferring built site to workspace..."
        cp -r "$TEMP_SITE_DIR"/* site/
        
        # Clean up temp directory
        rm -rf "$TEMP_SITE_DIR"
        
        # Verify the build was successful
        if [ ! -f "site/index.html" ]; then
          echo "❌ Build failed: site/index.html not found"
          exit 1
        fi
        
        echo "✅ Documentation site generated successfully"
        echo "📊 Site statistics:"
        echo "   - HTML files: $(find site -name '*.html' | wc -l)"
        echo "   - Total files: $(find site -type f | wc -l)"
        echo "   - Site size: $(du -sh site | cut -f1)"

    - name: 🔍 Validate Generated Site
      run: |
        cd documents/site
        
        # Comprehensive site validation
        echo "🔍 Validating generated documentation site..."
        
        # Verify core files exist
        if [ ! -f "index.html" ]; then
          echo "❌ ERROR: Site index.html not found"
          exit 1
        fi
        
        echo "✅ Core validation passed"
        
        # Check for key structural elements
        TOTAL_FILES=$(find . -name "*.html" | wc -l)
        DOMAIN_FILES=$(find . -path "*/domains/*" -name "*.html" | wc -l)
        CSS_FILES=$(find . -name "*.css" | wc -l)
        JS_FILES=$(find . -name "*.js" | wc -l)
        
        echo "📊 Site Structure Analysis:"
        echo "   - Total HTML pages: $TOTAL_FILES"
        echo "   - Domain pages: $DOMAIN_FILES"  
        echo "   - CSS files: $CSS_FILES"
        echo "   - JavaScript files: $JS_FILES"
        
        # Validate minimum expected content
        if [ "$TOTAL_FILES" -lt 10 ]; then
          echo "⚠️ WARNING: Low page count ($TOTAL_FILES), expected at least 10 pages"
        fi
        
        # Verify key pages exist
        KEY_PAGES=("index.html")
        for PAGE in "${KEY_PAGES[@]}"; do
          if [ -f "$PAGE" ]; then
            echo "✅ Key page found: $PAGE"
          else
            echo "❌ ERROR: Key page missing: $PAGE"
            exit 1
          fi
        done
        
        # Basic content validation
        if grep -q "Tournament Organizer" index.html; then
          echo "✅ Content validation: Site title found"
        else
          echo "⚠️ WARNING: Site title not found in index.html"
        fi
        
        echo "✅ Site validation completed successfully"

    - name: 📄 Setup Pages
      uses: actions/configure-pages@v4

    - name: 📤 Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: documents/site

    - name: 📊 Generate Deployment Report
      run: |
        cd documents
        
        # Create deployment report
        cat > deployment_report.md << 'EOF'
        # 📚 Documentation Deployment Report

        **Repository:** ${{ github.repository }}
        **Branch:** `${{ github.ref_name }}`
        **Commit:** `${{ github.sha }}`
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

        ## Deployment Details

        ### Build Information
        - **Trigger**: ${{ github.event_name }}
        - **Runner**: ${{ runner.os }}
        - **Container**: `localhost/docs-quality:latest`
        - **MkDocs**: Material theme with enterprise configuration

        ### Site Statistics
        EOF
        
        # Add site statistics
        if [ -d "site" ]; then
          TOTAL_HTML=$(find site -name "*.html" | wc -l)
          TOTAL_SIZE=$(du -sh site | cut -f1)
          
          cat >> deployment_report.md << EOF
        - **Total Pages**: $TOTAL_HTML HTML files
        - **Site Size**: $TOTAL_SIZE
        - **Build Status**: ✅ Success
        
        ### Quality Validation
        - ✅ **Container Build**: Documentation container built successfully
        - ✅ **Site Generation**: MkDocs build completed without errors
        - ✅ **File Validation**: Key pages verified
        - ✅ **Artifact Upload**: Site artifact prepared for deployment
        EOF
        else
          echo "- **Build Status**: ❌ Failed - site directory not found" >> deployment_report.md
        fi

    - name: 📄 Upload Deployment Report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: documents/deployment_report.md
        retention-days: 30

  deploy-docs:
    name: 🚀 Deploy to GitHub Pages
    needs: build-docs
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: 💡 Deployment Summary
      run: |
        echo "## 📚 Documentation Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Success" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Site URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Build**: Container-based MkDocs generation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Quality**: Validated during build process" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Artifact**: Uploaded to GitHub Pages" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Enterprise Standards" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 **Security**: Container-based build environment" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 **Quality**: Strict MkDocs validation" >> $GITHUB_STEP_SUMMARY
        echo "- 🎯 **Automation**: Deploy only on master branch changes" >> $GITHUB_STEP_SUMMARY
        echo "- 📚 **Documentation**: Complete site with domain structure" >> $GITHUB_STEP_SUMMARY
